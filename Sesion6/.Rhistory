curve(dnorm(x, mean = 150, sd = 10), from = 120, to = 180,
col='red', add = TRUE)
#platocúrtica
curve(dnorm(x, mean = 150, sd = 15), from = 120, to = 180,
col='green', add = TRUE)
}
mean <- 175
sd <- 6
#estandarización
x <- seq(-4, 4, 0.01)*sd + mean
y <- dnorm(x, mean = mean, sd = sd)
plot(x, y, type = "l", xlab = "X", ylab = "f(x)",
main = "Densidad de Probabilidad Normal",
sub = expression(paste(mu == 175, " y ", sigma == 6)))
integrate(dnorm, lower = x[1], upper = x[length(x)], mean=mean, sd = sd)
pnorm(q = 180, mean = mean, sd = sd, lower.tail = TRUE)
par(mfrow = c(2, 2))
plot(x, y, type = "l", xlab = "", ylab = "")
polygon(c(min(x), x[x<=180], 180), c(0, y[x<=180], 0), col="red")
pnorm(q = 165, mean = mean, sd = sd)
plot(x, y, type = "l", xlab = "", ylab = "")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(min(x), x[x<=165], 165), c(0, y[x<=165], 0), col="yellow")
pnorm(q = 180, mean = mean, sd = sd) - pnorm(q = 165, mean = mean, sd = sd)
plot(x, y, type = "l", xlab="", ylab="")
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(165, x[x>=165 & x<=180], 180), c(0, y[x>=165 & x<=180], 0), col="green")
pnorm(q = 182, mean = mean, sd = sd, lower.tail = FALSE)
1 - pnorm(q = 182, mean = mean, sd = sd, lower.tail = TRUE)
plot(x, y, type = "l", xlab="", ylab="", xlim = c(150, 200))
title(main = "Densidad de Probabilidad Normal", sub = expression(paste(mu == 175, " y ", sigma == 6)))
polygon(c(182, x[x>=182], max(x)), c(0, y[x>=182], 0), col="blue")
#cuando no contamos con el cuantil o valor, pero sí la probabilidad
b <- qnorm(p = 0.75, mean = mean, sd = sd)
b
pnorm(q = 179.0469, mean = mean, sd = sd)
pnorm(q = 100, mean = 120, sd = 85)
z <- (100 - 120) / 85
z
pnorm(z, mean = 0, sd = 1)
plot(x, y, type = "l", xlab = "X", ylab = "f(x)",
main = "Densidad de Probabilidad Normal",
sub = expression(paste(mu == 175, " y ", sigma == 6)))
binom.aprox <- rbinom(n = 10000, size = 10, prob = 0.5)
(binom.mean <- mean(binom.aprox))
(binom.sd <- sd(binom.aprox))
barplot(table(binom.aprox)/length(binom.aprox),
main = "Distribución Binomial",
xlab = "X=x")
curve(dnorm(x, mean = binom.mean, sd = binom.sd), from=0, to=10,
col='blue', main = "Densidad de Probabilidad Normal",
ylab = "f(x)", xlab = "X")
normal.binom <- rnorm(n = 10000, mean = binom.mean, sd = binom.sd)
mean(normal.binom)
sd(normal.binom)
set.seed(0202)
curve(dnorm(x, mean = 80, sd = 10), from = 40, to = 120,
col = "blue", main = "Densidad de probabilidad normal",
ylab = "f(x)", xlab = "X")
pnorm(q = 60, mean = 80, sd = 10)
pnorm(q = 150, mean = 80, sd = 10) - pnorm(q = 90, mean = 80, sd = 10)
qnorm(p = 0.1 / 2, mean = 80, sd = 10); qnorm(p = 0.1 / 2, mean = 80, lower.tail = FALSE)
qnorm(p = 0.1 / 2, mean = 80, sd = 10); qnorm(p = 0.1 / 2, mean = 80, sd = 10, lower.tail = FALSE)
qnorm(p = 0.1 / 2, mean = 80, sd = 10); 1 - qnorm(p = 0.1 / 2, mean = 80, sd = 10, lower.tail = TRUE)
qnorm(p = 0.1 / 2, mean = 80, sd = 10); qnorm(p = 1 - 0.1 / 2, mean = 80, sd = 10, lower.tail = TRUE)
pnorm(q = 20000, mean = 12500, sd = 7800)
pnorm(q = 20000, mean = 12500, sd = 7800, lower.tail = FALSE) #0.8318593
pnorm(q = 11000, mean = 12500, sd = 7800, lower.tail = TRUE)
pnorm(q = 15000, mean = 12500, sd = 7800) - pnorm(q = 13000, mean = 12500, sd = 7800)
qnorm(p = 0.1, mean = 12500, sd = 7800)
curve(dnorm(x, mean = 12500, sd = 7800), from = 2500, to = 22500,
col = "red", main = "Densidad de probabilidad normal",
ylab = "f(x)", xlab = "X")
curve(dnorm(x, mean = 12500, sd = 7800), from = 0, to = 25000,
col = "red", main = "Densidad de probabilidad normal",
ylab = "f(x)", xlab = "X")
curve(dnorm(x, mean = 12500, sd = 7800), from = -1000, to = 26000,
col = "red", main = "Densidad de probabilidad normal",
ylab = "f(x)", xlab = "X")
df <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-03/Data/telecom_service.csv")
summary(df)
barplot(table(poisson)/length(poisson),
main = "Distribución de Poisson",
xlab = "X=x")
barplot(table(df$total_intl_charge)/length(df$total_intl_charge),
main = "Distribución de Poisson",
xlab = "X=x")
poisson <- rpois(n = 10000, lambda = 2.765)
barplot(table(poisson)/length(poisson),
main = "Distribución de Poisson",
xlab = "X=x")
set.seed(0202)
barplot(table(poisson)/length(poisson),
main = "Distribución de Poisson",
xlab = "X=x")
set.seed(0202)
barplot(table(poisson)/length(poisson),
main = "Distribución de Poisson",
xlab = "X=x")
mean(df$total_intl_charge)
sd(df$total_intl_charge)
set.seed(0202)
barplot(table(poisson)/length(poisson),
main = "Distribución de Poisson",
xlab = "X=x")
poisson <- rpois(n = 10000, lambda = 2.764581)
barplot(table(poisson)/length(poisson),
main = "Distribución de Poisson",
xlab = "X=x")
poisson <- rpois(n = length(df$total_intl_charge), lambda = 2.764581)
barplot(table(poisson)/length(poisson),
main = "Distribución de Poisson",
xlab = "X=x")
curve(dnorm(x, mean = 2.764581, sd = 0.7537726), from = 0, to = 6,
col='blue', main = "Densidad Normal:\nDiferente media",
ylab = "f(x)", xlab = "X")
mean <- 2.764581
sd <- 0.7537726
#estandarización
x <- seq(-4, 4, 0.01)*sd + mean
y <- dnorm(x, mean = mean, sd = sd)
plot(x, y, type = "l", xlab = "X", ylab = "f(x)",
main = "Densidad de Probabilidad Normal",
sub = expression(paste(mu == 2.764581, " y ", sigma == 0.7537726)))
####### SESIÓN 5: TEOREMA DEL LÍMITE CENTRAL E INFERENCIA ESTADÍSTICA  ########
###############################################################################
set.seed(2022)
par(mfrow=c(2,2))
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample5, main = "n = 5", xlab = "")}
{sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample5, main = "n = 5", xlab = "")}
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
sample5[i] <- mean(rexp(n = n, rate = 0.1))
hist(sample5, main = "n = 5", xlab = "")}
hist(sample5, main = "n = 5", xlab = "")}
hist(sample5, main = "n = 5", xlab = "")}
hist(sample5, main = "n = 5", xlab = "")}
hist(sample5, main = "n = 5", xlab = "")}
hist(sample10, main = "n = 10", xlab = "")}
hist(sample5, main = "n = 5", xlab = "")}
{
sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample5, main = "n = 5", xlab = "")
}
{
sample10 <- c()
n <- 10
for (i in 1:10000) {
sample10[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample10, main = "n = 10", xlab = "")
}
{
sample100 <- c()
n <- 100
for (i in 1:10000) {
sample100[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample100, main = "n = 100", xlab = "")
}
{
sample1000<- c()
n <- 1000
for (i in 1:10000) {
sample1000[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample1000, main = "n = 1000", xlab = "")
}
mean(sample1000); 1/0.1
sd(sample1000); sqrt(1/0.1**2)/sqrt(1000)
a <- 5
b <- 1
curve(dbeta(x, shape1 = a, shape2 = b),
from = 0, to = 1,
xlab = "X", ylab = "f(x)", main = "Distribución de beta")
{
sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rexp(n = n, rate = 0.1))
}
hist(sample5, main = "n = 5", xlab = "")
}
legend(x = 2, y = 0.4, legend=c("N(0,1)", "df=1", "df=5", "df=10", "df=100"),
col=c("black","blue", "green", "orange", "red"), lty = 1, bty = "n", cex=0.8)}
{
curve(dnorm(x), from = -4, to = 4, xlab = "X", ylab = "f(x)", main = "Distribución t - Student")
legend(x = 2, y = 0.4, legend=c("N(0,1)", "df=1", "df=5", "df=10", "df=100"),
col=c("black","blue", "green", "orange", "red"), lty = 1, bty = "n", cex=0.8)
}
curve(dt(x, 1), from = -4, to = 4, col = "blue", add = TRUE)
curve(dt(x, 5), from = -4, to = 4, col = "green", add = TRUE)
curve(dt(x, 10), from = -4, to = 4, col = "orange", add = TRUE)
curve(dt(x, 100), from = -4, to = 4, col = "red", add = TRUE)
df <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-03/Data/telecom_service.csv")
t.test(x = df$total_intl_calls, alternative = 'less', mu = 4.54)
a <- 5
b <- 1
curve(dbeta(x, shape1 = a, shape2 = b),
from = 0, to = 1,
xlab = "X", ylab = "f(x)", main = "Distribución Beta")
par(mfrow=c(2,2))
curve(dbeta(x, shape1 = a, shape2 = b),
from = 0, to = 1,
xlab = "X", ylab = "f(x)", main = "Distribución Beta")
{
sample5 <- c()
n <- 5
for (i in 1:10000) {
sample5[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample5, main = "n = 5", xlab = "")
}
{
sample10 <- c()
n <- 10
for (i in 1:10000) {
sample10[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample10, main = "n = 10", xlab = "")
}
{
sample100 <- c()
n <- 100
for (i in 1:10000) {
sample100[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample100, main = "n = 100", xlab = "")
}
{
sample1000<- c()
n <- 1000
for (i in 1:10000) {
sample1000[i] <- mean(rbeta(n = n, shape1 = a, shape2 = b))
}
hist(sample1000, main = "n = 1000", xlab = "")
}
mean(sample1000); a/(a+b)
sd(sample1000); sqrt((a*b)/((a+b+1)*(a+b)**2))/sqrt(1000)
dev.off()
t.test(x = df$number_vmail_messages, alternative = 'greater', mu = 7.79)
t.test(x = df$customer_service_calls, alternative = 'two.sided', mu = 1.59)
var.test(df[df$churn == 1, "customer_service_calls"],
df[df$churn == 0, "customer_service_calls"],
ratio = 1, alternative = "two.sided")
t.test(x = df[df$churn == 1, "customer_service_calls"],
y = df[df$churn == 0, "customer_service_calls"],
alternative = "greater", mu = 0, var.equal = FALSE)
var.test(df[df$churn == 1, "total_intl_calls"],
df[df$churn == 0, "total_intl_calls"],
ratio = 1, alternative = "two.sided")
t.test(x = df[df$churn == 1, "total_intl_calls"],
y = df[df$churn == 0, "total_intl_calls"],
alternative = "two.sided", mu = 0, var.equal = TRUE)
library(dplyr)
library(ggplot2)
df <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-06/data/nyc_restaurants.csv", header = TRUE)
str(df)
df$East <- factor(df$East, labels = c("No", "Yes"))
df.select <- select(df, Price, Food, Decor, Service)
round(cor(df.select),4)
pairs(~ Price + Food + Decor + Service + East,
data = df, gap = 0.4, cex.labels = 1.5)
attach(df)
#linear model (lm())
m1 <- lm(Price ~ Food + Decor + Service + East)
sumary(m1)
summary(m1)
m2 <- lm(Price ~ Food + Service + East)
summary(m2)
-24.023800 / 4.708359
m2 <- update(m1, ~.-Service)
summary(m2)
StanRes2 <- rstandard(m2)
par(mfrow = c(2, 2))
plot(Food, StanRes2, ylab = "Residuales Estandarizados")
plot(Food, StanRes2, ylab = "Residuales Estandarizados")
plot(Food, StanRes2, ylab = "Residuales Estandarizados")
plot(Decor, StanRes2, ylab = "Residuales Estandarizados")
plot(East, StanRes2, ylab = "Residuales Estandarizados")
qqnorm(StanRes2)
qqline(StanRes2)
dev.off()
shapiro.test(StanRes2)
data <- data.frame(
Food = c(18.6, 30.3, 22.1, 24.9),
Decor = c(20, 15, 10, 9),
East = c("Yes", "No", "Yes", "No")
)
predict(m2, newdata = data, interval = "confidence", level = 0.95)
df.r <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-06/data/SwedishMotorInsurance.csv", header = TRUE)
head(df.r)
str(df.r)
summary(df.r)
df.r.select <- select(df.r, Payment, Claims, Insured)
round(cor(df.r.select), 4)
pairs(~ Payment + Claims + Insured,
data = df, gap = 0.4, cex.labels = 1.5)
pairs(~ Payment + Claims + Insured,
data = df, gap = 0.4, cex.labels = 1.5)
pairs(~ Payment + Claims + Insured,
data = df.r, gap = 0.4, cex.labels = 1.5)
m1 <- lm(Payment ~ Claims + Insured)
attach(df.r.select)
m1 <- lm(Payment ~ Claims + Insured)
summary(m1)
StanRes <- rstandard(m1)
par(mfrow = c(2, 2))
par(mfrow = c(2, 2))
plot(m1$fitted.values, Payment, ylab = "Valores ajustados")
plot(Claims, StanRes, ylab = "Residuales Estandarizados")
plot(Insured, StanRes, ylab = "Residuales Estandarizados")
qqnorm(StanRes)
qqline(StanRes)
dev.off()
shapiro.test(StanRes)
m2 <- update(m1, ~.-Insured)
summary(m2)
StanRes2 <- rstandard(m2)
par(mfrow = c(2, 2))
plot(m2$fitted.values, Payment, ylab = "Valores ajustados")
plot(Claims, StanRes2, ylab = "Residuales Estandarizados")
plot(Insured, StanRes2, ylab = "Residuales Estandarizados")
qqnorm(StanRes2)
qqline(StanRes2)
dev.off()
shapiro.test(StanRes2)
m3 <- update(m1, ~.-Claims)
summary(m3)
StanRes3 <- rstandard(m3)
par(mfrow = c(2, 2))
plot(m3$fitted.values, Payment, ylab = "Valores ajustados")
plot(m3$fitted.values, Payment, ylab = "Valores ajustados")
plot(Claims, StanRes3, ylab = "Residuales Estandarizados")
plot(Insured, StanRes3, ylab = "Residuales Estandarizados")
qqnorm(StanRes3)
qqline(StanRes3)
dev.off()
df <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-03/Data/telecom_service.csv")
attach(df)
y = df$churn
x = df$customer_service_calls
logistic.1 <- glm(churn - customer_service_calls, family = binomial)
logistic.1 <- glm(churn - customer_service_calls, family = binomial)
attach(df)
logistic.1 <- glm(churn - customer_service_calls, family = binomial)
logistic.1 <- glm(churn ~ customer_service_calls, family = binomial)
summary(logistic.1)
exp(coef(logistic.1))
curve(predict(logistic.1, newdata = data.frame(x), type = "response"),
add = TRUE)
y = df$churn
x = df$customer_service_calls
logistic.1 <- glm(y ~ x, family = binomial)
curve(predict(logistic.1, newdata = data.frame(x), type = "response"),
add = TRUE)
logistic.1 <- glm(y ~ x, family = binomial)
summary(logistic.1)
curve(predict(logistic.1, newdata = data.frame(x), type = "response"),
add = TRUE)
plot(churn ~ customer_service_calls, data=df, xlim = c(0,10))
curve(predict(logistic.1, newdata = data.frame(x), type = "response"),
add = TRUE)
install.packages("DBI")
install.packages("RMySQL")
library(DBI)
library(RMySQL)
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListTables(db.conn)
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListFields(db.conn, "city")
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListFields(db.conn, "City")
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest06",
password = "guest")
db.conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListTables(db.conn)
dbListFields(db.conn, "City")
dbListFields(db.conn, "Country")
dbListFields(db.conn, "ContryLanguage")
db.data <- dbGetQuery(db.conn, "SELECT a.Name AS City,
a.Population AS CityPopulation,
b.Name AS Contry,
b.Pupulation AS CityPopulation
FROM City AS a
INNER JOIN Country AS b
ON a.CountryCode = b.Code
ORDER BY CityPopulation DESC")
dbListFields(db.conn, "CountryLanguage")
db.data <- dbGetQuery(db.conn, "SELECT a.Name AS City,
a.Population AS CityPopulation,
b.Name AS Contry,
b.Pupulation AS CityPopulation
FROM City AS a
INNER JOIN Country AS b
ON a.CountryCode = b.Code
ORDER BY CityPopulation DESC")
db.data <- dbGetQuery(db.conn, "SELECT a.Name AS City,
a.Population AS CityPopulation,
b.Name AS Contry,
b.Population AS CityPopulation
FROM City AS a
INNER JOIN Country AS b
ON a.CountryCode = b.Code
ORDER BY CityPopulation DESC")
db.data <- dbGetQuery(db.conn, "SELECT a.Name AS City,
a.Population AS CityPopulation,
b.Name AS Contry,
b.Population AS CountryPopulation
FROM City AS a
INNER JOIN Country AS b
ON a.CountryCode = b.Code
ORDER BY CityPopulation DESC")
class(db.data)
head(db.data)
rs <- dbSendQuery(db.conn, "SELECT 'Hola Mundo!!!' AS Saludo")
dbFetch(rs)
dbClearResult(rs)
dbDisconnect(db.conn)
head(db.data)
install.packages("rjson")
library(rjson)
URL <- "https://tools.learningcontainer.com/sample-json-file.json"
JsonData <- fromJSON(file = URL)
class(JsonData)
str(JsonData)
JsonData$Name
is.vector(JsonData$Pets)
JsonData$Pets[1]
summary(var.iris)
library(dplyr)
var.iris <- iris
summary(var.iris)
anova <- aov(log(Sepal.Width) ~ Species, data = var.iris)
summary(anova)
adv <- read.csv("https://raw.githubusercontent.com/beduExpert/Programacion-R-Santander-2022/main/Sesion-06/data/advertising.csv")
sumary(adv)
summary(adv)
#Matriz de coorelación entre las variables
round(cor(adv), 4)
pairs(~ Sales + TV + Radio + Newspaper,
data = adv, gap = 0.4, cex.labels = 1.5)
setwd("~/Documents/BEDU_F2_DataScience_Projects_R/PostWorks/BEDU-DataScience-F2-R/Sesion6")
attach(adv)
#modelo de regresión lineal
m1 <- lm(Sales ~ TV + Radio + Newspaper)
summary(m1)
m2 <- lm(Sales ~ TV + Radio)
summary(m2)
m2 <- update(m1, ~.-Newspaper)
summary(m2)
